PROFILE:=default_profile
%include $[PROFILE]

NODATA_VALUE:=-2147483648
PIXELTYPE:="32BF"

wget()
    mkdir -p $(dirname $OUTPUT0)
    wget --output-document="$OUTPUT0" "$URL"

psql()
    cat $INPUT | envsubst | psql -v ON_ERROR_STOP=1 2>&1 && echo > $OUTPUT

pgsql2shp()
    TABLE=$(basename $INPUT)
    pgsql2shp -g geom -f $OUTPUT $PGDATABASE $TABLE 

raster2tiff()
    TABLE=$(basename $INPUT)
    psql -c "\COPY (SELECT encode(ST_AsTIFF(rast), 'hex') AS tiff FROM $TABLE) TO STDOUT" | xxd -p -r > $OUTPUT


URL="https://s3.amazonaws.com/metro-extracts.mapzen.com/chicago_illinois.osm.pbf"
download/chicago_illinois.osm.pbf <- [method:wget -timecheck]
    
psql/planet_osm <- download/chicago_illinois.osm.pbf
    osm2pgsql --slim --proj $SRID --create --database $PGDATABASE $INPUT && touch $OUTPUT

; select land polygon using ${LAND_CONDITION}
psql/area <- area.sql, psql/planet_osm [method:psql]
psql/water <- water.sql, psql/planet_osm, psql/area [method:psql]
psql/parks <- parks.sql, psql/planet_osm [method:psql]
psql/roads <- roads.sql, psql/planet_osm [method:psql]

output/water.shp <- psql/water [method:pgsql2shp]

; raster indicating which points are land
; used to filter distance calculations
; and as reference for output raster
psql/area_raster <- area_raster.sql, psql/area [method:psql]
output/area.tiff <- psql/area_raster [method:raster2tiff]

psql/mask_raster <- mask_raster.sql, psql/area_raster, psql/planet_osm [method:psql]
output/mask.tiff <- psql/mask_raster [method:raster2tiff]

; create table of points over land by rasterizing land
psql/points <- points.sql, psql/area_raster [method:psql]

; calculate distances
psql/distances <- distances.sql, psql/points, psql/roads [method:psql]
psql/park_distances <- park_distances.sql, psql/points, psql/parks [method:psql]

; create new raster setting pixels of rast with distances
psql/distances_raster <- distances_raster.sql, psql/distances, psql/area_raster [method:psql]

psql/park_distances_raster <- park_distances_raster.sql, psql/park_distances, psql/area_raster [method:psql]

; https://petewarden.com/2013/08/31/how-to-save-an-image-to-disk-from-postgis/
output/distances.tiff <- psql/distances_raster [method:raster2tiff]
output/park_distances.tiff <- psql/park_distances_raster [method:raster2tiff]
    
METRIC_RATIO:=1
METRIC_SCALE:=1

output/diff_distances.tiff <- output/distances.tiff, output/park_distances.tiff
    gdal_calc.py --overwrite -A $INPUT0 -B $INPUT1 --outfile=$OUTPUT --calc="$METRIC_SCALE*(A-$METRIC_RATIO*B)" --NoDataValue=${NODATA_VALUE}

output/diff_distances_hillshade.tiff <- output/diff_distances.tiff
    gdaldem hillshade $INPUT $OUTPUT

output/diff_distances_slope.tiff <- output/diff_distances.tiff
    gdaldem slope $INPUT $OUTPUT

output/diff_distances_color.tiff <- output/diff_distances.tiff, color-relief.txt
    gdaldem color-relief $INPUT $INPUT1 $OUTPUT

output/diff_distances_relief.png <- relief.py, output/diff_distances_color.tiff, output/diff_distances_slope.tiff, output/diff_distances_hillshade.tiff, output/mask.tiff
    python $INPUT

; ogr2ogr -clipsrc ~/openstreetmap-carto/data/land-polygons-split-3857/land_polygons.shp output/land_polygons_clipped.shp output/area.shp
